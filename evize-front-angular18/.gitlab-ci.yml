# This file is a template, and might need editing before it works on your project.
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages

variables:
  IMAGE_TAG: $CI_REGISTRY/$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  SERVICE_NAME: $SERVICE_NAME

stages: # List of stages for jobs, and their order of execution
  - build
  - upload
  - deploy

build: # This job runs in the build stage, which runs first.
  stage: build
  script:
    - echo "Building the docker image"
    - docker build -t $IMAGE_TAG .
    - echo "Build complete."
  artifacts:
    paths:
      - npm-install-log.txt


upload:
  stage: upload
  script:
    - echo "Logging into server"
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - echo "Pushing the image"
    - docker push $IMAGE_TAG

deploy: # This job runs in the deploy stage.
  stage: deploy # It only runs when *both* jobs in the test stage complete successfully.
  script:
    - docker service ls | grep $SERVICE_NAME && docker service update --force --with-registry-auth --image=$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG $SERVICE_NAME || echo "Service not found"
    - echo "Deploying application..."
    - echo "Application successfully deployed."
